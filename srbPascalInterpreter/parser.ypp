%{
    #include <iostream>
    #include <vector>
    #include <string>
    #include <cstdlib>
    #include <map>
    #include "Structures.hpp"
    #define YYDEBUG 1
    using namespace std;
    
    void yyerror(string s){
        cerr << "Parser error " << s << endl;
        exit(EXIT_FAILURE);
    } 
    
    extern int yylex();
    
    map<string,float> symbol_table;
    
%}
%union{
    string *str;
    Expression *ex;
    float num;
    Statement *stmt;
    
    vector<Statement*> *stmts;
}

%token pocetak_token kraj_token ispisi_token ako_je_token onda_token inace_token sve_dok
%token <str> string_token id_token
%token <num> num_token

%type <stmt> Naredba Blok
%type <ex> E
%type <stmts> NizNaredbi

%left '+' '-'
%left '*' '/'


%%

program: Blok '.'  { $1->execute(); delete $1;
}
        ;
Blok: pocetak_token NizNaredbi kraj_token {
                                        $$ = new Block(*$2);
                                        delete $2;
}
        ;
NizNaredbi: NizNaredbi ';' Naredba {    $$ = $1;
                                        $$->push_back($3);       
}
          | Naredba {                   $$ = new vector<Statement*>();
                                        $$->push_back($1);
}
          ;
Naredba: ispisi_token '(' string_token ')'  {$$ =  new PrintString(*$3); 
                                             delete $3;}
        | ispisi_token '(' E ')'            {$$ = new PrintExpression($3);}
        | ispisi_token '(' id_token ')'     {$$ = new PrintVariable(*$3);}
        | Blok { $$ = $1;}
        | id_token '=' E  { $$ = new Declaration(*$1,$3);
                            delete $1;
                          }
        | ako_je_token E onda_token Naredba { $$ = new IfStmt($2,$4);} 
        | ako_je_token E onda_token Naredba inace_token Naredba  {$$ = new IfElseStmt($2,$4,$6);}
        | sve_dok E onda_token Naredba {$$ = new WhileStmt($2,$4);}
        ;
E : E '+' E         {$$ = new Sum($1, $3);}
    | E '*' E       {$$ = new Mul($1, $3);}
    | E '-' E       {$$ = new Sub($1,$3);}
    | E '/' E       {$$ = new Div($1, $3);}
    | '(' E ')'     {$$ = $2;}
    | num_token     {$$ = new Constant($1);}
    ;
%%

int main(){
    //yydebug = 1 ;
    yyparse();


    return 0;
}